import os
import time

from leapp.actors import Actor
from leapp.exceptions import StopActorExecutionError
from leapp.libraries.common.fstab import FSTAB_LOGFILE, drop_xfs_options
from leapp.libraries.stdlib import api
from leapp.models import FstabContents, ModifiedFstabContents, Report
from leapp.tags import ChecksPhaseTag, IPUWorkflowTag
from leapp import reporting


PREFACE = """# Below are the modified contents of /etc/fstab that have been generated for
# the upgraded system. Changes to this file will not be reflected. If you
# believe the file has been modified incorrectly, please report a bug and
# attach this file and the current /etc/fstab.

# Generated by leapp on {}
# ========================================
"""


class CheckFstab(Actor):
    """
    Scan /etc/fstab for XFS mount options that have been removed in RHEL 8.

    In case one or more of the options are present in /etc/fstab, generate new contents of the file
    for the target system, provide them to the user via {} for inspection and finally, produce the
    contents as a message.
    """.format(FSTAB_LOGFILE)

    name = 'check_fstab'
    consumes = (FstabContents)
    produces = (Report, ModifiedFstabContents)
    tags = (ChecksPhaseTag, IPUWorkflowTag)

    def process(self):
        fstab = next(self.consume(FstabContents), None)
        if not fstab:
            raise StopActorExecutionError('Cannot check /etc/fstab contents',
                                          details={'Problem': 'Did not receive a message with /etc/fstab'
                                                              'contents (KernelCmdline)'})
        fstab_old = fstab.lines

        fstab_new = drop_xfs_options(fstab_old)
        if fstab_new == fstab_old:
            api.current_logger().debug('No changes made in /etc/fstab')
            if os.path.exists(FSTAB_LOGFILE):
                api.current_logger().debug('{} exists from a previous run, cleaning up'.format(FSTAB_LOGFILE))
                os.remove(FSTAB_LOGFILE)
            return

        try:
            with open(FSTAB_LOGFILE, 'w') as f:
                f.write(PREFACE.format(time.ctime()))
                f.writelines(fstab_new)
        except (IOError, OSError):
            raise StopActorExecutionError(message='Could not open {} for writing'.format(FSTAB_LOGFILE))

        reporting.create_report([
            reporting.Title(
                '/etc/fstab will be modified during upgrade'
            ),
            reporting.Summary(
                'In RHEL 8, several mount options for XFS are removed and their usage in /etc/fstab would '
                'result in an unbootable system. Since the options are already deprecated and do not have '
                'any effect on the mounts, leapp will remove them.\n'
                'A copy of the new /etc/fstab has been written to {}. '.format(FSTAB_LOGFILE) +
                'Please check the file for correctness. '
                'Changes to this file will not be reflected in the upgrade process.'
            ),
            reporting.Severity(reporting.Severity.HIGH),
            reporting.Tags([
                reporting.Tags.BOOT,
                reporting.Tags.FILESYSTEM,
                reporting.Tags.OS_FACTS
            ]),
            reporting.RelatedResource('file', '/etc/fstab'),
            reporting.RelatedResource('file', FSTAB_LOGFILE)
        ])

        self.produce(ModifiedFstabContents(lines=fstab_new))
